<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_ire_exten.MapProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>MapProcessor</name>
        <script><![CDATA[var MapProcessor = Class.create();
MapProcessor.prototype = {
    initialize: function() {},
    //Start New Map Standardization Logic
    standardizeItems: function(mapItems){
        var obj = {};
        for(var i  = 0; i < mapItems.length; i++){
            var tableElement = mapItems[i];
            obj[tableElement.className.value] = this.setItemValues(tableElement.values);
        }

        return obj;
    },

    setItemValues: function(values){
        var obj = {};
        for(var i = 0; i < values.length; i++){
            var element = values[i];
            obj[element.column.value] = {}
            obj[element.column.value].key = element.objectKey.stack;
            if(element.column.referenceTable && element.column.referenceField){
                obj[element.column.value].referenceTable = element.column.referenceTable;
                obj[element.column.value].referenceLookup = element.column.referenceField.value;
            }
        }

        return obj;
    },

    standardizeRelationships: function(relations){
        var relationArray = [];
        for(var i = 0; i < relations.length; i++){
            var rel = relations[i];
            var relObj = {};
            relObj.parent = rel.parent.value;;
            relObj.child = rel.child.value;
            relObj.type = rel.type.value;
            relObj.referenceField = rel.child.referenceField.value;;
            relationArray.push(relObj);
        }
        return relationArray;
    },


    //End Array Standardization Logic



    //Start Array Standaridzation Logic
    standardizeMap: function(keyArray) {
        var obj = {};
        for (var key in keyArray) {
            for (var i = 0; i < keyArray[key].length; i++) {
                var element = keyArray[key][i];
                if (!obj[element.table]) {
                    obj[element.table] = {};
                }
                obj[element.table][element.column] = {
                    key: key,
                };
                if (element.referenceTable && element.referenceLookup) {
                    obj[element.table][element.column].referenceTable = element.referenceTable;
                    obj[element.table][element.column].referenceLookup = element.referenceLookup;
                }
            }
        }

        return obj;
    },

    nestRelationships: function(standardMap, relationships) {
        var returnArray = [];
        for (var i = 0; i < relationships.length; i++) {
            var rel = relationships[i];
            if (standardMap[rel.parent] && standardMap[rel.child]) {
                var pObj = this.buildNestObj(rel.parent, standardMap[rel.parent], true, rel.referenceField);
                pObj.relations.push(this.buildNestObj(rel.child, standardMap[rel.child], true, rel.referenceField));
                returnArray.push(pObj);
                delete standardMap[rel.parent];
                delete standardMap[rel.child];
                //standardMap[rel.parent].used = true;
                //standardMap[rel.child].used = true;
            } else if(standardMap[rel.parent] || standardMap[rel.child]) {
                if (standardMap[rel.parent]) {
                    var pmObj = this.addParentObj(returnArray, rel.child, rel.parent, standardMap[rel.parent], true, rel.referenceField);
                    if (pmObj.added) {
                        returnArray = pmObj.array;
                    } else {
                        returnArray.push(this.buildNestObj(rel.parent, standardMap[rel.parent], true, rel.referenceField));
                    }
                    delete standardMap[rel.parent];
                   // standardMap[rel.parent].used = true;
                } else if (standardMap[rel.child]) {
                    var cmObj = this.addChildObj(returnArray, rel.parent, rel.child, standardMap[rel.child], true, rel.referenceField);
                    if (cmObj.added) {
                        returnArray = cmObj.array;
                    } else {
                        returnArray.push(this.buildNestObj(rel.child, standardMap[rel.child], true, rel.referenceField));
                    }
                    delete standardMap[rel.child];
                   // standardMap[rel.child].used = true;
                }
            }else{
                // relationship exists but primary relationship has been established already

                returnArray = this.setNonPrimaryRelationship(returnArray, rel);
            }
        }
        return returnArray;
    },


    setNonPrimaryRelationship: function(returnArray, relationship){
        for(var i = 0; i < returnArray.length; i++){
            var element = returnArray[i];
            if(element.className === relationship.parent && element.isPrimary){
                // does child classname exist in related?
                var childExists = this.classNameInArray(element.relations, relationship.child);
                if(!childExists){
                    var primary = this.findPrimaryClass(returnArray, relationship.child);
                    if(primary){
                        returnArray[i].relations.push(this.buildNestObj(primary.className, primary.values, null, relationship.referenceField))
                        break;
                    }
                    
                }
            }
            if(element.relations.length > 0){
                returnArray[i].relations = this.setNonPrimaryRelationship(element.relations, relationship);
            }
        }

        return returnArray;
    },

    findPrimaryClass: function(array, className){
        for(var i = 0; i < array.length; i++){
            var element = array[i];
            if(element.className === className && element.isPrimary){
                return element;
            }
            if(element.relations.length > 0){
                return this.findPrimaryClass(element.relations, className);
            }
        }
    },

    classNameInArray: function(array, className){
        for(var i = 0; i < array.length; i++){
            var element = array[i];
            if(element.className === className){
                return true;
            }
        }
    },

    addChildObj: function(returnArray, targetTable, childTable, values, primary, referenceField) {
        var added = false;
        for (var i = 0; i < returnArray.length; i++) {
            var element = returnArray[i];
            if (element.isPrimary && element.className === targetTable) {
                returnArray[i].relations.push(this.buildNestObj(childTable, values, primary, referenceField));
                added = true;
            } else if (element.relations.length > 0) {
                var modObj = this.addChildObj(element.relations, targetTable, childTable, values, primary, referenceField);
                added = modObj.added;
                returnArray[i].relations = modObj.array;
            }
        }
        return {
            array: returnArray,
            added: added
        };
    },

    addParentObj: function(returnArray, targetTable, parentTable, values, primary, referenceField) {
        var added = false;
        for (var i = 0; i < returnArray.length; i++) {
            var element = returnArray[i];
            if (element.className === targetTable) {
                var obj = this.buildNestObj(parentTable, values, primary, referenceField);
                obj.relations.push(element);
                returnArray[i] = obj;
                added = true;
            } else if (element.relations.length > 0) {
                var modObj = this.addParentObj(element.relations, targetTable, parentTable, values, primary, referenceField);
                added = modObj.added;
                returnArray[i].relations = modObj.array;
            }
        }
        return {
            array: returnArray,
            added: added
        };
    },

    buildNestObj: function(table, values, isPrimary, referenceField) {
        //gs.info('d'+referenceField)
        var returnObj = {};
        returnObj.className = table;
        if(isPrimary){
            returnObj.isPrimary = true
        }
        if(referenceField){
            returnObj.referenceField = referenceField;
        }
        returnObj.values = values;
        returnObj.relations = [];
        return returnObj;
    },

    // addReferenceItems: function(relationalMap, referenceItems){
    //     for(var i = 0; i < relationalMap.length; i++){
    //         var element = relationalMap[i];
    //         var matchRefItems= this.findMatchingReferenceItems(element.className, referenceItems);
    //         if(matchRefItems.length > 0){
    //             for(var a = 0; a < matchRefItems.length; a++){
    //                 var reference = matchRefItems[a];
    //                 if(!relationalMap[i].referenceItems){
    //                     relationalMap[i].referenceItems = [];
    //                 }
    //                 relationalMap[i].referenceItems.push(reference);
    //             }
    //         } 
    //         if(element.relations.length > 0){
    //             relationalMap[i].relations = this.addReferenceItems(relationalMap[i].relations, referenceItems);
    //         }
    //     }
    //     return relationalMap;
    // },

    // findMatchingReferenceItems: function(className, referenceItems){
    //     var returnArray = [];
    //     for(var i = 0; i < referenceItems.length; i++){
    //         var element = referenceItems[i];
    //         if(element.child === className){
    //             returnArray.push(element);
    //         }
    //     }
    //     return returnArray;
    // },

    //End Array Standaridzation Logic


    //Start object map processing logic

    processObject: function(map, obj, indexTrack, tableIndexTrack) {
        if (!indexTrack) {
            indexTrack = [];
        }
        if (!tableIndexTrack) {
            tableIndexTrack = {};
        }
        var returnArray = [];
        for (var i = 0; i < map.length; i++) {
            var element = map[i];
            var valueArray = this.extractValues(element.values, obj, indexTrack);
            //gs.info('value array: ' +  JSON.stringify(valueArray));
            for (var v = 0; v < valueArray.length; v++) {
                var getGuidObj = this.getGuid(valueArray[v], element.className, tableIndexTrack)
                var guid = getGuidObj.guid;
                tableIndexTrack = getGuidObj.tableIndexTrack;
                var newObj = {};
                newObj.className = element.className;
                newObj.internal_id = guid;
                newObj.referenceField = element.referenceField;
                if(element.isPrimary){
                    newObj.isPrimary = element.isPrimary;
                }
                if(element.refereceId){
                    newObj.refereceId = element.refereceId;
                }
                newObj.values = valueArray[v].values;
                if (element.relations && element.relations.length > 0) {
                    newObj.relations = this.processObject(element.relations, obj, valueArray[v].indexTrack, tableIndexTrack);
                }
                returnArray.push(newObj);
            }
        }
        return returnArray;
    },

    getGuid: function(valueElement, className, tableIndexTrack){
        var guid = '';
        if(valueElement.indexTrack && valueElement.indexTrack.length > 0){
            if(!tableIndexTrack[className]){
                tableIndexTrack[className] = {}
            }
            if(tableIndexTrack[className][JSON.stringify(valueElement.indexTrack)]){
                guid = tableIndexTrack[className][JSON.stringify(valueElement.indexTrack)];
            }else{
                var g = gs.generateGUID();
                tableIndexTrack[className][JSON.stringify(valueElement.indexTrack)] = g;
                guid = g;
            }
        }else{
            guid = gs.generateGUID();
        }
        return {
            guid:  guid,
            tableIndexTrack: tableIndexTrack
        }
    },

    extractValues: function(values, obj, indexTrack) {
        var returnArray = [];
        var singleValObj = {};
        for (var column in values) {
            var v = this.findValue(values[column].key, obj, indexTrack);
            if (Array.isArray(v)) {
                for (var i = 0; i < v.length; i++) {
                    if (values[column].referenceTable && values[column].referenceLookup) {
                        v[i].value = this.lookupReferenceFiled(values[column].referenceTable, values[column].referenceLookup, v[i].value);
                    }
                    if (!returnArray[i]) {
                        returnArray[i] = {
                            values: {}
                        };
                    }
                    returnArray[i].values[column] = v[i].value;
                    returnArray[i].indexTrack = v[i].indexTrack;
                }
            } else {
                if (values[column].referenceTable && values[column].referenceLookup) {
                    v = this.lookupReferenceFiled(values[column].referenceTable, values[column].referenceLookup, v);
                }
                singleValObj[column] = v;
            }
        }
        returnArray = this.unifyData(returnArray, singleValObj);

        return returnArray;
    },

    lookupReferenceFiled: function(table, column, value) {
        var gr = new GlideRecord(table);
        if (gr.get(column, value)) {
            return gr.getUniqueValue();
        } else {
            return '';
        }
    },

    unifyData: function(array, singleObj) {
        if (array.length <= 0) {
            array[0] = {
                values: {}
            };
        }
        for (var i = 0; i < array.length; i++) {
            for (var col in singleObj) {
                array[i].values[col] = singleObj[col];
            }
        }
        return array;
    },

    findValue: function(stack, obj, indexTrack, arrayDepth) {
        if (!Array.isArray(stack)) {
            stack = stack.split('.');
        }
        var val = obj;
        for (var i = 0; i < stack.length; i++) {
            if (this.getType(val) == 'array') {
                var reStack = [];
                for (var t = i; t < stack.length; t++) {
                    reStack.push(stack[t]);
                }
                if (!arrayDepth && arrayDepth != 0) {
                    arrayDepth = -1;
                }
                arrayDepth++;
                return this.indexArray(val, reStack, indexTrack, arrayDepth);
            }
            val = val[stack[i]];
        }
        return val;
    },
	
	indexArray: function(array, stack, indexTrack, arrayDepth) {
		var returnArray = [];
		if (indexTrack[arrayDepth] || indexTrack[arrayDepth] === 0) {
			var val = this.findValue(stack, array[indexTrack[arrayDepth]], indexTrack, arrayDepth);
			if (Array.isArray(val)) {
				returnArray = returnArray.concat(val);
			} else {
				returnArray.push({
					indexTrack: indexTrack,
					value: val
				});
			}
		} else {
			var ogIndexTrack = this.copyArray(indexTrack);
			for (var a = 0; a < array.length; a++) {
				indexTrack = this.copyArray(ogIndexTrack);
				indexTrack.push(a);
				var arrayVal = this.findValue(stack, array[a], indexTrack, arrayDepth);
				if (Array.isArray(arrayVal)) {
					returnArray = returnArray.concat(arrayVal);
				} else {
					returnArray.push({
						indexTrack: indexTrack,
						value: arrayVal
					});
				}
			}
		}


		return returnArray;
	},
	
	//End object map processing logic
	
	//Start IRE format Converstion Logic
	
	formatArrayForIRE: function(array, returnArray, parentId, mainArray) {
		if (!returnArray) {
			returnArray = {
				items: [],
                relations: [],
                referenceItems: []
			};
        }
        if(!mainArray){
            mainArray = this.copyArray(array);
        }
		for (var i = 0; i < array.length; i++) {
            var element = array[i];
            var childId = element.internal_id;
            if(element.isPrimary){
                var obj = this.copyElement(element);
                returnArray.items.push(obj);
            }
			if (parentId) {
				returnArray.relations.push({
					parent_id: parentId,
					child_id: childId,
					type: "Contains::Contained by"
                });
                if(element.referenceField){
                    returnArray.referenceItems.push({
                        referenced: parentId,
                        referencedBy: childId,
                        referenceField: element.referenceField
                    })
                }
			}
			if (element.relations && element.relations.length > 0) {
				returnArray = this.formatArrayForIRE(element.relations, returnArray, obj.internal_id, mainArray);
			}
		}
		return returnArray;
	},

	copyElement: function(element) {
		var obj = {};
		obj.className = element.className;
		obj.internal_id = element.internal_id;
		obj.values = element.values;
		return obj;
    },
    
    findElementFromId: function(array, internal_id){
        var foundElement = '';
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            if(element.isPrimary){
                if(element.internal_id === internal_id){
                    //gs.info('found it: '  + element.internal_id);
                    foundElement = element;
                    break;
                }
                if(element.relations && element.relations.length > 0){
                    foundElement = this.findElementFromId(element.relations, internal_id);
                }   
            }
            
        }
        return foundElement;
    },
	
	
	//End IRE format Converstion Logic
	
	//start helper functions
	
	copyArray: function(origArray) {
		var sp = [];
		for (var i = 0; i < origArray.length; i++) {
			sp.push(origArray[i]);
		}
		return sp;
	},
	
	getType: function(val) {
		var type = typeof val;
		if (type === 'object') {
			if (Array.isArray(val)) {
				return 'array';
			}
		}
		return type;
    },
    
	//end helper functions
    type: 'MapProcessor'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2020-05-12 12:39:00</sys_created_on>
        <sys_id>f451022cdbb8101095ea53184b961944</sys_id>
        <sys_mod_count>78</sys_mod_count>
        <sys_name>MapProcessor</sys_name>
        <sys_package display_value="IRE Extension" source="x_156954_ire_exten">268ef9a8dbb8101095ea53184b9619c4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IRE Extension">268ef9a8dbb8101095ea53184b9619c4</sys_scope>
        <sys_update_name>sys_script_include_f451022cdbb8101095ea53184b961944</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2020-06-16 02:08:53</sys_updated_on>
    </sys_script_include>
</record_update>
