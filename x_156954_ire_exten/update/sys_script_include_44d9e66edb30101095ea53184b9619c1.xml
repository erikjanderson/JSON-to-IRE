<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_ire_exten.IREMapUIHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>IREMapUIHelper</name>
        <script><![CDATA[var IREMapUIHelper = Class.create();
IREMapUIHelper.prototype = {
    initialize: function() {
    },
	
	getReferenceTable: function(table, element){
		var gr = new GlideRecord("sys_dictionary");
		gr.addQuery("name", table);
		gr.addQuery("element", element);
		gr.query();
		if (gr.next()) {
			if(gr.reference){
				return gr.reference.name + '';
			}
		}
	},
	
	analyzePayload: function(payload){
		try{
			var obj = JSON.parse(payload);
			var keyObj = this.scanObject(obj, 0);
			var array = this.polishObj(keyObj);
			return array;
		}catch(e){
			gs.addErrorMessage(JSON.stringify(e));
		}
	},

	polishObj: function(keyObj){
		var returnArray = [];
		var lowestLevel;
		for(var key in keyObj){
			if(!lowestLevel && lowestLevel != 0){
				lowestLevel = keyObj[key].level;
			}else{
				if(keyObj[key].level < lowestLevel){
					lowestLevel = keyObj[key].level;
				}
			}
			returnArray.push(keyObj[key]);
		}
		if(lowestLevel){
			returnArray = this.reduceLevels(returnArray, lowestLevel);
		}
		return returnArray;
	},

	reduceLevels: function(array, lowestLevel){
		for(var i = 0; i < array.length; i++){
			array[i].level =  array[i].level - lowestLevel;
		}
		return array;
	},

	scanObject: function(obj, level, stack, arrayObj){
		if(!arrayObj){
			arrayObj = {};
		}
		
		for(var key in obj){
			var newStack = this.getStack(key, stack);
			var type = this.getType(obj[key]);
			if(type === 'object'){
				arrayObj[newStack] = new this.PayloadElement(newStack, key, obj[key], level, type);
				arrayObj = this.scanObject(obj[key], level + 1, newStack, arrayObj);
			}else if(type === 'array'){
				arrayObj[newStack] = new this.PayloadElement(newStack, key, obj[key], level, type);
				arrayObj = this.scanArray(obj[key], level + 1, newStack, arrayObj);
			}else{
				arrayObj[newStack] = new this.PayloadElement(newStack, key, obj[key], level, type);
			}
		}
		return arrayObj;
	},

	scanArray: function(array, level, stack, arrayObj){
		for(var i = 0; i < array.length; i++){
			arrayObj = this.scanObject(array[i], level, stack, arrayObj);
		}
		return arrayObj;
	},

	getStack: function(key, stack){
		if(!stack){
			stack = key;
		}else{
			stack = stack + '.' + key;
		}
		return stack;
	},


	getType: function(val) {
		var type = typeof val;
		if (type === 'object') {
			if (Array.isArray(val)) {
				return 'array';
			}
		}
		return type;
    },
	
	PayloadElement: function(stack, key, value, level, type){
		this.stack = stack;
		this.key = key;
		if(type != 'object' && type !='array'){
			this.value = value;
		}else{
			this.parentRep = true;
			this.showDetails = true;
		}
		this.level = level;
		this.type = type;
	},
    type: 'IREMapUIHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2020-05-18 20:43:39</sys_created_on>
        <sys_id>44d9e66edb30101095ea53184b9619c1</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>IREMapUIHelper</sys_name>
        <sys_package display_value="IRE Extension" source="x_156954_ire_exten">268ef9a8dbb8101095ea53184b9619c4</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IRE Extension">268ef9a8dbb8101095ea53184b9619c4</sys_scope>
        <sys_update_name>sys_script_include_44d9e66edb30101095ea53184b9619c1</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2020-05-21 03:15:16</sys_updated_on>
    </sys_script_include>
</record_update>
